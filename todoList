-Add message to reset the tank settings
-Make the message disappear after a time. ( including the remove message button in 10 seconds).
  If I click the remove message button it should also disappear along with the message
-Create 3 tank using inheritance and each tank with different functionality.
    For example one of them should have their speed limit capped at 300 and it should be able to increase its speed by 15 each time.

-I also should make the buttons state what is the increase of speed that they could have as well as things as the speed limit specified for each tank.

-Also it should be interesting to get the speed limit based on the type of engine instead of just assigning it inside of the different classes.



-Also be able to give other functionalities to the other two tanks that perform a function that is not available in tanks of other tiers.
To work with inheritance I could start with something as simple as not being able to create a tech with a fan without it being of a sub-class.

 They can be something simple such as fly recharge fuel.
 But it will be better to start when something like "Shield type" That is just going to throw another image for the 2nd and 3rd tank.
 And act one thing to the third class such as a turbine type

Another feature that I could add is to have a fuel tank that will be specific for each tank and each time the tank performs a function the fuel could be reduced.

Currently I had an issue that I was able to overcome basically I wanted to modify the property of an object without altering the original object itself and all I needed to do was to use that notation to pull that property outside of the object and leave the original untouched but another thing that I could do is to use the following type of code that i need to learn:

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Using the Object.assign Method:

To ensure that no accidental modifications happen, you can create a shallow copy of the object and access properties from the copied version.
Object.assign({}, obj) creates a new object with the same properties as obj without linking it to the original.

////////////////////////////////////////////
const original = { name: "Alice", age: 25 };
const copy = Object.assign({}, original);

// Now `copy` is an independent copy of `original`
copy.age = 30;

console.log(original.age); // 25 (unchanged)
/////////////////////////////////////////////
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""